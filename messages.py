from aiogram import types
from aiogram.dispatcher import FSMContext  # –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback
from for_states import Currency
from models import User, Curs, Byn, Usd, Eur, Rub
from for_requests import nbrb
import keyboard

WELCOM = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –≤–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∞–ª—é—Ç—ã " \
         "–æ–Ω —É–º–µ–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö.\n" \
         "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≤–∞–ª—é—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏: RUB, USD, EUR.\n\n"


async def analysis(message: types.Message):
    await message.answer("–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üßÆ", reply_markup=keyboard.get_button_more_one_row(keyboard.analysis_two_row))


async def get_curr_today(message: types.Message):
    rub = nbrb.get_rate_rub()
    eur = nbrb.get_rate_eur()
    usd = nbrb.get_rate_usd()
    await message.answer(f"–ö—É—Ä—Å –ø–æ –ù–ë–†–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                         f"RUB  :  {rub}\n"
                         f"USD  :  {usd}\n"
                         f"EUR  :  {eur}", reply_markup=keyboard.get_inline_buttons(keyboard.myfin))


async def hello(message: types.Message):
    if message.chat.type == "private":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def start(message: types.Message):
    if message.chat.type == "private":
        if User.check_unique(message.from_user.id):
            if User.add_new_user(message.from_user):
                await message.answer("–£—Ä–∞, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å)",
                                     reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))
            else:
                await message.answer("–í–∏–¥–∏–º–æ –±–æ—Ç –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)",
                                     reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + message.from_user.first_name,
                                 reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def main_menu(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def information(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–ª Roman",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def menu_write_money(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        await state.finish()
        await message.answer("–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç—ã:",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))


async def start_write_byn(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BYN, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_byn_waiting.set()


async def write_byn(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " BYN",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Byn.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_usd(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_usd_waiting.set()


async def write_usd(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " USD",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Usd.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_eur(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EUR, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_eur_waiting.set()


async def write_eur(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " EUR",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Eur.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_rub(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 1500.52 –∏–ª–∏ 1500):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_rub_waiting.set()


async def write_rub(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " RUB",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Rub.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def get_sum_all_currency(message: types.Message):
    if message.chat.type == "private":
        usd_rate = Curs.get_last_curs_usd()[0][0]
        eur_rate = Curs.get_last_curs_eur()[0][0]
        rub_rate = Curs.get_last_curs_rub()[0][0]

        usd = Usd.get_last_record(message.from_user.id)[0][0]
        eur = Eur.get_last_record(message.from_user.id)[0][0]
        rub = Rub.get_last_record(message.from_user.id)[0][0]
        byn = Byn.get_last_record(message.from_user.id)[0][0]

        sum_usd = usd * usd_rate
        sum_rub = (rub * rub_rate) / 100
        sum_eur = eur * eur_rate

        final_sum_byn = sum_eur + sum_rub + sum_usd + byn
        "–ö—É–ø–ª–µ–Ω–æ: EUR = {:>.2f}\n".format(eur)
        await message.answer("–°—É–º–º–∞ USD –≤ BYN: {:>.2f}\n".format(sum_usd)
                             + "–°—É–º–º–∞ EUR –≤ BYN: {:>.2f}\n".format(sum_eur)
                             + "–°—É–º–º–∞ RUB –≤ BYN: {:>.2f}\n".format(sum_rub)
                             + "–°—É–º–º–∞ BYN: {:>.2f}\n\n".format(byn)
                             + "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ BYN: {:>.2f}".format(final_sum_byn))


async def get_all_currency(message: types.Message):
    if message.chat.type == "private":
        usd = Usd.get_last_record(message.from_user.id)
        eur = Eur.get_last_record(message.from_user.id)
        rub = Rub.get_last_record(message.from_user.id)
        byn = Byn.get_last_record(message.from_user.id)
        await message.answer(f"BYN: {byn[0][0]}\nUSD: {usd[0][0]}\nEUR: {eur[0][0]}\nRUB: {rub[0][0]}")


async def menu_rates_currency(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ú–µ–Ω—é –∫—É—Ä—Å –≤–∞–ª—é—Ç:", reply_markup=keyboard.get_button_more_one_row(keyboard.rates_menu))


async def get_curs_on_date(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:")
