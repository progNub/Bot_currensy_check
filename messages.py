import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext  # –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback
import aioschedule, time, asyncio

import loader
from for_states import Currency, Date_state
from models import User, Curs, Byn, Usd, Eur, Rub
from for_requests import nbrb
from loader import bot
import keyboard

WELCOM = "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –≤–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∞–ª—é—Ç—ã " \
         "–æ–Ω —É–º–µ–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö.\n" \
         "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≤–∞–ª—é—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏: RUB, USD, EUR.\n\n"


async def analysis(message: types.Message):
    await message.answer("–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üßÆ", reply_markup=keyboard.get_button_more_one_row(keyboard.analysis_two_row))


async def get_curr_today(message: types.Message):
    rub = nbrb.get_rate_rub()
    eur = nbrb.get_rate_eur()
    usd = nbrb.get_rate_usd()
    curs = Curs(RUB=rub, USD=usd, EUR=eur)
    Curs.update_curs(curs)
    await message.answer(f"–ö—É—Ä—Å –ø–æ –ù–ë–†–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                         f"RUB  :  {rub}\n"
                         f"USD  :  {usd}\n"
                         f"EUR  :  {eur}", reply_markup=keyboard.get_inline_buttons(keyboard.myfin))


async def hello(message: types.Message):
    if message.chat.type == "private":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def start(message: types.Message):
    if message.chat.type == "private":
        if message.from_user.id == loader.admin:
            await message.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é)",
                                 reply_markup=keyboard.get_button_more_one_row(keyboard.start_admin_menu))
        else:
            if User.check_unique(message.from_user.id):
                if User.add_new_user(message.from_user):
                    await message.answer("–£—Ä–∞, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å)",
                                         reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))
                else:
                    await message.answer("–í–∏–¥–∏–º–æ –±–æ—Ç –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)",
                                         reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))
            else:
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + message.from_user.first_name,
                                     reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def main_menu(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def information(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–ª Roman",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.start_two_row))


async def menu_write_money(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        await state.finish()
        await message.answer("–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –≤–∞–ª—é—Ç—ã:",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))


async def start_write_byn(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BYN, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_byn_waiting.set()


async def write_byn(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " BYN",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Byn.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_usd(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_usd_waiting.set()


async def write_usd(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " USD",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Usd.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_eur(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EUR, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 158,25 –∏–ª–∏ 158):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_eur_waiting.set()


async def write_eur(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " EUR",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Eur.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def start_write_rub(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB, (–Ω–∞ –ø—Ä–∏–º–µ—Ä: 1500.52 –∏–ª–∏ 1500):",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.hide_choice_currency))
        await Currency.write_rub_waiting.set()


async def write_rub(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        try:
            count_money = float(message.text)
        except ValueError:
            await message.answer("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞'")
            return
        await message.answer("–í—ã –≤–≤–µ–ª–∏: " + str(count_money) + " RUB",
                             reply_markup=keyboard.get_button_more_one_row(keyboard.choice_currency))
        if Rub.add_money(message.from_user.id, count_money):
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
        await state.finish()


async def get_sum_all_currency(message: types.Message):
    if message.chat.type == "private":
        usd_rate = Curs.get_last_curs_usd()[0][0]
        eur_rate = Curs.get_last_curs_eur()[0][0]
        rub_rate = Curs.get_last_curs_rub()[0][0]
        usd = Usd.get_last_record(message.from_user.id)
        eur = Eur.get_last_record(message.from_user.id)
        rub = Rub.get_last_record(message.from_user.id)
        byn = Byn.get_last_record(message.from_user.id)
        sum_usd = usd * usd_rate
        sum_rub = (rub * rub_rate) / 100
        sum_eur = eur * eur_rate
        final_sum_byn = sum_eur + sum_rub + sum_usd + byn

        await message.answer("USD: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(usd, usd_rate, sum_usd)
                             + "EUR: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(eur, eur_rate, sum_eur)
                             + "RUB: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(rub, rub_rate, sum_rub)
                             + "BYN: {:<10.0f}\n\n".format(byn)
                             + "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ BYN: {:>.2f}".format(final_sum_byn))


async def get_all_currency(message: types.Message):
    if message.chat.type == "private":
        usd = Usd.get_last_record(message.from_user.id)
        eur = Eur.get_last_record(message.from_user.id)
        rub = Rub.get_last_record(message.from_user.id)
        byn = Byn.get_last_record(message.from_user.id)
        await message.answer(f"BYN: {byn[0][0]}\nUSD: {usd[0][0]}\nEUR: {eur[0][0]}\nRUB: {rub[0][0]}")


async def menu_rates_currency(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ú–µ–Ω—é –∫—É—Ä—Å –≤–∞–ª—é—Ç:", reply_markup=keyboard.get_button_more_one_row(keyboard.rates_menu))


#### —Å–¥–µ–ª–∞—Ç—å —Ç—É—Ç –≤—Å–µ —á—Ç–æ –±—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞, —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
async def get_curs_on_date(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: –ø—Ä–∏–º–µ—Ä: " + str(datetime.date.today()))
        await Date_state.write_date_waiting.set()


async def write_date(message: types.Message, state: FSMContext, ):
    if message.chat.type == "private":
        run = True  ## –ø–µ—Ä–≤—ã–π –ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
        run2 = ""  ## –≠—Ç–æ—Ç run2 —Å–æ–∑–¥–∞–Ω —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–∞—Ç–∞ –±—É–¥—É—â–∞—è
        try:
            run2 = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
        except ValueError:
            run = False
        if run:
            if run2 < datetime.date.today():
                rub = nbrb.get_rate_rub(message.text)
                eur = nbrb.get_rate_eur(message.text)
                usd = nbrb.get_rate_usd(message.text)
                curs = Curs(RUB=rub, USD=usd, EUR=eur)
                Curs.update_curs(curs)
                await message.answer(f"–ö—É—Ä—Å –ø–æ –ù–ë–†–ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                                     f"RUB  :  {rub}\n"
                                     f"USD  :  {usd}\n"
                                     f"EUR  :  {eur}", reply_markup=keyboard.get_inline_buttons(keyboard.myfin))
            else:
                await message.answer("–ú—ã –Ω–µ —É–º–µ–µ–º –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞)")
        else:
            await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    await state.finish()


async def menu_ubscribe(message: types.Message):
    if message.chat.type == "private":
        if User.check_subscribe(message.from_user.id):
            await message.answer(
                "–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä.", reply_markup=keyboard.get_inline_buttons([['–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', 'subscribe']]))
        else:
            await message.answer(
                "–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä.", reply_markup=keyboard.get_inline_buttons([['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'subscribe']]))


async def subscribe(callback_query: types.CallbackQuery):
    if callback_query.message.chat.type == "private":
        User.subscribe(callback_query.from_user.id)
        if User.check_subscribe(callback_query.from_user.id):
            await callback_query.answer(
                "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", cache_time=5)
        else:
            await callback_query.answer(
                "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å", cache_time=5)
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


async def mailing(message: types.Message):
    if message.from_user.id == loader.admin:
        usd_rate = Curs.get_last_curs_usd()[0][0]
        eur_rate = Curs.get_last_curs_eur()[0][0]
        rub_rate = Curs.get_last_curs_rub()[0][0]
        for i in User.get_list_subscrubers():
            usd = Usd.get_last_record(i[0])
            eur = Eur.get_last_record(i[0])
            rub = Rub.get_last_record(i[0])
            byn = Byn.get_last_record(i[0])
            sum_usd = usd * usd_rate
            sum_rub = (rub * rub_rate) / 100
            sum_eur = eur * eur_rate
            final_sum_byn = sum_eur + sum_rub + sum_usd + byn
            await bot.send_message(chat_id=i[0],
                                   text="USD: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(usd, usd_rate, sum_usd)
                                        + "EUR: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(eur, eur_rate,
                                                                                                  sum_eur)
                                        + "RUB: {:<10.0f} –∫—É—Ä—Å {:>8.2f} BYN = {:>10.2f}\n".format(rub, rub_rate,
                                                                                                  sum_rub)
                                        + "BYN: {:<10.0f}\n\n".format(byn)
                                        + "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤ BYN: {:>.2f}".format(final_sum_byn))
        await bot.send_message(chat_id=loader.admin, text="–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")


async def admin(message: types.message):
    if message.chat.type == "private":
        if loader.admin == message.from_user.id:
            await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω–∞",
                                 reply_markup=keyboard.get_button_more_one_row(keyboard.admin_menu))
